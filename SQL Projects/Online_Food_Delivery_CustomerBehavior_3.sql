 CREATE DATABASE  Customer_Behavior_DeliveryProducts_3

 USE Customer_Behavior_DeliveryProducts_3


 CREATE TABLE Product (
    product_id INT PRIMARY KEY,
    product_name  nvarchar(100),
    price DECIMAL(8,2)
);


INSERT INTO Product (product_id, product_name, price) VALUES
(1, 'Dal Makani', 160),
(2, 'Shahi Panner', 170),
(3, 'Butter Chicken', 340),
(4, 'Aloo Gobi', 150),
(5, 'Chole Bhature', 100),
(6, 'Fish Curry', 380),
(7, 'Chicken Tikka', 300),
(8, 'Mutton Biryani', 450),
(9, 'Veg Pulao', 200),
(10, 'Mango Lassi', 80),
(11, 'Gulab Jamun', 100);

SELECT * FROM Product


CREATE TABLE Users (
    userid INT PRIMARY KEY,
    signup_date DATE
);

INSERT INTO Users (userid, signup_date) VALUES
(1, '2014-09-02'),
(2, '2015-01-15'),
(3, '2014-04-11'),
(4, '2015-11-17'),
(10, '2016-01-02'),
(9, '2016-01-02'),
(7, '2013-04-02'),
(8, '2013-12-15'),
(5, '2015-09-08'),
(6, '2014-07-13');

SELECT * FROM Users

CREATE TABLE User_name (
    userid INT PRIMARY KEY,
    user_name NVARCHAR(100),
    FOREIGN KEY (userid) REFERENCES Users(userid)
        ON UPDATE CASCADE ON DELETE CASCADE
);

INSERT INTO User_name (userid, user_name) VALUES
(1, 'Anshul'),
(2, 'Rohan'),
(3, 'Shreya'),
(4, 'Priya'),
(5, 'Aryan'),
(6, 'Sara'),
(7, 'Sahil'),
(8, 'Tanvi'),
(9, 'Ritika'),
(10, 'Gaurav');

SELECT * FROM USER_NAME


CREATE TABLE Goldusers_signup (
    userid INT PRIMARY KEY,
    gold_signup_date DATE,
    FOREIGN KEY (userid) REFERENCES Users(userid)
        ON UPDATE CASCADE ON DELETE CASCADE
);


INSERT INTO Goldusers_signup (userid, gold_signup_date) VALUES
(1, '2014-09-02'),
(2, '2015-01-15'),
(3, '2014-04-11'),
(4, '2015-11-17'),
(10, '2016-01-02'),
(9, '2016-01-02'),
(7, '2013-04-02'),
(8, '2013-12-15'),
(5, '2015-09-08'),
(6, '2014-07-13');

SELECT * FROM Goldusers_signup


CREATE TABLE Sales (
    Userid INT ,
    created_date DATE,
    product_id INT,
    FOREIGN KEY (product_id) REFERENCES Product(product_id),
        
    FOREIGN KEY (userid) REFERENCES Users(userid),
        
    FOREIGN KEY (userid) REFERENCES Goldusers_signup(userid),
        
    FOREIGN KEY (Userid) REFERENCES User_name(userid)
        
);
DROP TABLE Sales


INSERT INTO Sales (userid, created_date, product_id) VALUES
(1, '2017-04-19', 2),
(3, '2019-12-18', 1),
(2, '2020-07-20', 3),
(1, '2019-10-23', 2),
(1, '2018-03-19', 3),
(3, '2016-12-20', 2),
(2, '2016-11-09', 1),
(1, '2016-05-20', 3),
(2, '2017-09-24', 1),
(1, '2017-03-11', 2),
(1, '2016-03-11', 1),
(3, '2016-11-10', 1),
(3, '2017-12-07', 2),
(3, '2016-12-15', 2),
(2, '2017-11-08', 2),
(2, '2018-09-10', 3),
(4, '2019-05-01', 1),
(5, '2018-11-23', 3),
(6, '2017-06-30', 8),
(7, '2018-08-12', 8),
(8, '2019-03-19', 7),
(9, '2017-12-04', 6),
(10, '2018-09-22', 2),
(4, '2020-08-17', 1),
(5, '2017-05-12', 10),
(7, '2014-07-02', 11),
(8, '2014-04-02', 7),
(8, '2020-12-15', 8),
(9, '2017-09-08', 8);






--- PROBLEM STATEMENTS

Q1. What is the total sales revenue generated by each product? 

SELECT SUM(PRICE) AS TotalRevenue FROM Product

SELECT P.product_id,P.product_name, SUM(Price) as Total_Revenue_By_Products 
FROM Sales S
INNER JOIN 
Product P
ON
S.product_id = P.product_id
GROUP BY p.product_name, P.product_id
ORDER bY Total_Revenue_By_Products DESC


Q2. Which 3 product has the highest sales revenue? 

SELECT TOP 3 P.product_name, SUM(Price) as Total_Revenue_By_Products 
FROM Sales S
INNER JOIN 
Product P
ON
S.product_id = P.product_id
GROUP BY p.product_name
ORDER bY Total_Revenue_By_Products DESC


Q3. How many users have signed up for the service and has taken the gold membership?

SELECT DISTINCT COUNT(userid) as Total_GoldMembers 
FROM Goldusers_signup



Q4. What is the revenue generated from gold users? 

SELECT 
    GS.userid, 
    SUM(p.price) AS total_revenue_by_products
FROM 
    Sales s
INNER JOIN 
    Goldusers_signup gs ON S.userid = gs.userid
INNER JOIN 
    Product p ON s.product_id = p.product_id
GROUP BY 
    GS.userid
ORDER BY
    total_revenue_by_products DESC;



Q5. What is the total revenue generated from gold users? 


SELECT  
    SUM(p.price) AS total_revenue_by_products
FROM 
    Sales s
INNER JOIN 
    Goldusers_signup gs ON S.userid = gs.userid
INNER JOIN 
    Product p ON s.product_id = p.product_id


Q6. Which users has been a gold user for the How much of time? 
 
 -- There is no specific time given for end of Goldmembership date. so we cosidder that customers ares still gold members

 SELECT GS.UserId,UN.User_name, DATEDIFF(MONTH, GS.gold_signup_date, GETDATE()) as Total_Months_of_Goldmembers, 
 DATEDIFF(Year, GS.gold_signup_date, GETDATE()) as Total_Years_of_Goldmembers 
 FROM Goldusers_signup GS
 INNER JOIN User_Name UN
 ON
 GS.userid = UN.userid
 ORDER BY Total_Years_of_Goldmembers DESC


 Q7. What is the most popular product among gold users? 


 SELECT TOP 
    S.product_id,P.Product_Name, COUNT(*) AS Total_Orders
FROM  Sales s
INNER JOIN 
    Goldusers_signup gs ON S.userid = gs.userid
INNER JOIN 
 Product p ON s.product_id = p.product_id
GROUP BY  S.Product_id,P.Product_Name
ORDER BY Total_Orders DESC;



Q8. What is the total sales revenue generated in each year? 

SELECT  YEAR(S.CREATED_Date) AS Year,SUM(P.Price) as Total_Revenue_By_Year 
FROM Sales S
INNER JOIN 
Product P
ON
S.product_id = P.product_id
GROUP BY YEAR(S.CREATED_Date)
ORDER bY YEAR(S.CREATED_Date) 



Q9. How has the sales revenue changed over the years? 

WITH Revenue_Diff AS (
SELECT  YEAR(S.CREATED_Date) AS Current_Year,SUM(P.Price) as Total_Revenue_By_Year
FROM Sales S
INNER JOIN 
Product P
ON
S.product_id = P.product_id
GROUP BY YEAR(S.CREATED_Date)
)

SELECT Current_Year, Total_Revenue_By_Year,
Total_Revenue_By_Year - LAG(Total_Revenue_By_Year) OVER(Order BY Current_Year) AS Revenue_Diff_yearly
FROM Revenue_Diff


Q10. What is the average Gold-signup compare to just sign up for the users? 

SELECT (count(GS.USERID) /COUNT(U.userid) )*100 AS Percentage_Goldsignup_Users
FROM Goldusers_signup GS
RIGHT JOIN
Users U
ON
GS.userid = U.userid

SELECT ((SELECT COUNT(*) FROM Goldusers_signup) /
(SELECT COUNT(*) FROM Users ) * 100)
AS Percentage_Goldsignup_Users




Q11. How many gold members users have order how many numbers of time ?

SELECT GS.userid, COUNT(*) Total_Orders  FROM Goldusers_signup GS
LEFT JOIN
Sales S
ON GS.userid = S.userid
GROUP BY gS.Userid




SELECT * FROM Goldusers_signup
 SELECT * FROM Users
SELECT * FROM User_name
SELECT * FROM Product
SELECT * FROM SALES

Q12. What is the total amount each customer spend on Online Food Delivery? 

SELECT S.Userid, SUM(P.price) as Total_Expenditure FROM Sales S
Left join
Product P
ON
S.product_Id = P.product_id
GROUP BY s.Userid


Q13. What is the frequency of customer visits to the online platform ?

SELECT USERID, COUNT(*) as Total_Visits FROM SALES 
GROUP BY Userid


Q14. What was the first order purchase by each customer ? 

Select * FROM (
SELECT S.userid, s.created_date, P.Product_Name, P.price,
ROW_NUMBER() OVER(Partition by S.userId Order by S.created_date) AS First_Order
FROM Sales S
Left join
Product P
ON
S.product_Id = P.product_id
) AS Orders
WHERE First_order = 1


Q15. What is the most purchase item on the menu and how many times was it purchased by all customers?

SELECT TOP 1 P.Product_Name, Count(*) AS Total_Purchaces
FROM Sales S
Left join
Product P
ON
S.product_Id = P.product_id
GROUP By P.product_name
ORDER BY Total_Purchaces DESC;


Q16. Which item was most popular for each customer ? 

SELECT * FROM (
    SELECT S.userid, P.product_name, COUNT(*) AS purchase_count,
        ROW_NUMBER() OVER (PARTITION BY S.userid ORDER BY COUNT(*) DESC) as RN
    FROM Sales S
    LEFT JOIN Product P 
	ON S.product_id = P.product_id
    GROUP BY S.userid, P.product_name
) Most_Popular
WHERE rn = 1;


Q17. Which item was purchase first by the customer after they become a member ? 


SELECT * FROM (
    SELECT GS.userid, P.product_name, S.created_date,
        ROW_NUMBER() OVER (PARTITION BY GS.userid ORDER BY S.created_date) AS rn
    FROM Goldusers_signup GS
    INNER JOIN Sales S ON GS.userid = S.userid
    INNER JOIN Product P ON S.product_id = P.product_id
    WHERE S.created_date > GS.gold_signup_date
) first_purchase
WHERE rn = 1;



Q18.Which item was purchase before the customer become a member ?


SELECT * FROM (
    SELECT GS.userid, P.product_name, S.created_date,
        ROW_NUMBER() OVER (PARTITION BY GS.userid ORDER BY S.created_date DESC) AS rn
    FROM Goldusers_signup GS
    INNER JOIN Sales S ON GS.userid = S.userid
    INNER JOIN Product P ON S.product_id = P.product_id
    WHERE S.created_date < GS.gold_signup_date
) first_purchase
WHERE rn = 1;


Q19. What is the total orders and amount spent for each member before they become a member ? 

SELECT 
    GS.userid, 
    COUNT(S.product_id) AS total_orders,
    SUM(P.price) AS total_amount_spent
FROM Goldusers_signup GS
INNER JOIN Sales S ON GS.userid = S.userid
INNER JOIN Product P ON S.product_id = P.product_id
WHERE S.created_date < GS.gold_signup_date
GROUP BY GS.userid;


Q20. Rank all the transactions for each member whenever they are a XYZ gold member for every non gold member Transaction marks as na ? 

SELECT 
    S.userid,
    S.created_date,
    P.product_name,
    CASE 
        WHEN S.created_date >= GS.gold_signup_date THEN 
            RANK() OVER (PARTITION BY S.userid ORDER BY S.created_date)
        ELSE 'na'
    END AS txn_rank
FROM Sales S
LEFT JOIN Goldusers_signup GS ON S.userid = GS.userid
LEFT JOIN Product P ON S.product_id = P.product_id;
